version: "3.7"
services:

  api:
    hostname: api
    build: 
      context: langora
      dockerfile: Dockerfile
    image: local_image/langora-app
    restart: unless-stopped
    ports:
      #- 5678:5678
      - 5000:5000
    volumes:
      - ./langora/app:/app
      - ./storage:/storage
    networks:
      - langora-backend
      - langora-frontend
    env_file:
      - .env
    command: python3 api.py
    depends_on:
      - db
      - redis

  worker:
    hostname: worker
    image: local_image/langora-app
    restart: unless-stopped
    volumes:
      - ./langora/app:/app
      - ./storage:/storage
    networks:
      - langora-backend
    env_file:
      - .env
    command: /usr/bin/supervisord
    depends_on:
      - db
      - redis

  db:
    hostname: ${POSTGRES_HOST}
    image: ankane/pgvector
    restart: always
    ports:
     - ${POSTGRES_PORT}:5432
    environment:      
      - TZ=${TZ}
      - POSTGRES_DB
      - POSTGRES_USER
      - POSTGRES_PASSWORD
      - POSTGRES_HOST_AUTH_METHOD=trust
    volumes:
      - ./storage/db/db-data:/var/lib/postgresql/data
      - ./storage/db/init.sql:/docker-entrypoint-initdb.d/init.sql      
    networks:
      - langora-backend

  dbadmin:
    hostname: dbadmin
    image: adminer
    restart: unless-stopped    
    ports:
      - 8080:8080
    networks:
      - langora-backend
      - langora-frontend
    depends_on: 
      - db  

  web:
    hostname: web
    build: web
    image: local_image/langora-web
    restart: unless-stopped
    ports:
      - 3000:3000
    volumes:
      - ./web:/web
    networks:
      - langora-frontend
    environment:
      - TZ=${TZ}
      - ENV
      - DEBUG
      - API_URL
      #dev recompile on change
      - FAST_REFRESH=false
      - CHOKIDAR_USEPOLLING=true
      - WATCHPACK_POLLING=true
    depends_on:
      - api

  proxy:
    hostname: proxy
    build: proxy
    image: local_image/langora-proxy
    restart: unless-stopped
    ports:
      - 80:80
    networks:
      - langora-frontend
    environment:
      - TZ=${TZ}
    depends_on:
      - web

  redis: 
    hostname: redis
    image: redis/redis-stack-server:latest
    restart: always
    ports:
      - ${REDIS_PORT}:6379
    volumes:
      - ./storage/db/redis-data:/data
    networks:
      - langora-backend
    environment:
      - TZ=${TZ}

  # redisinsight:
  #   image: redislabs/redisinsight:latest
  #   restart: unless-stopped
  #   ports:
  #     - 8001:8001
  #   networks:
  #     - backend-network
  #     - frontend-network
  #   depends_on: 
  #     - redis

networks:
  langora-backend:
  langora-frontend:
